heat_template_version: 2015-10-15

description: |
   ### Using heat to run acme.sh
<<<<<<< HEAD
   ### and get a valid letsencrypt SSL certificate
   ### author: Brian King
   ### license: Apache
   ### last modified: 2020-03-21

parameter_groups:

=======
   ### and get a valid SSL certificate

parameter_groups:

- label: Server Settings
  parameters:
    - serverName
    - serverImage
    - serverFlavor

>>>>>>> acme.sh fails when inovted from a bash script
- label: DNS settings
  parameters:
    - domainToSecure
    - emailAddr

parameters:

<<<<<<< HEAD
# begin DNS params
  domainToSecure:
    type: string
    default: example.mydomain.com
=======
#begin server params

  serverName:
    type: string
    label: 'Name of new server'
    default: 'acme-00'

  serverImage:
    type: string
    default: 'CentOS 7 (PVHVM) (Orchestration)'
    label: Server image label
    description: Image with which to build server

  serverFlavor:
    type: string
    default: 1 GB General Purpose v1
    label: Server flavor
    description: Must be a valid Rackspace Cloud Flavor
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      description: must be a valid Rackspace Cloud Server flavor.

# begin DNS params
  domainToSecure:
    type: string
    default: example.rackesc.net
>>>>>>> acme.sh fails when inovted from a bash script
    label: Domain that will receive the letsencrypt cert. DNS must be hosted in Rackspace Cloud.
    description: Domain that will receive the letsencrypt cert. DNS must be hosted in Rackspace Cloud.

  emailAddr:
    type: string
<<<<<<< HEAD
    default: example@example.com
=======
    default: nobody@noone.net
>>>>>>> acme.sh fails when inovted from a bash script
    label: email address for Rackspace DNS record, letsencrypt account, and Cloud Monitoring notifications

resources:

#begin server resources

  serverPass:
      type: OS::Heat::RandomString

  serverInstance:
    type: OS::Nova::Server
    properties:
<<<<<<< HEAD
      name:
        str_replace:
          template: letsencrypt-dns-$domain
          params:
            $domain: { get_param: domainToSecure }
      admin_pass: { get_attr: [ serverPass, value ] }
      flavor: general1-1
      image: "CentOS 7 (PVHVM) (Orchestration)"
      config_drive: True
      user_data_format: SOFTWARE_CONFIG
      metadata:
        created_by: cloud_orch_template
      networks:
        - network: "00000000-0000-0000-0000-000000000000"
        - network: "11111111-1111-1111-1111-111111111111"

  getChallenge:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      outputs:
      - name: challenge
        type: String
      config:
        str_replace:
          params:
            $domain: { get_param: domainToSecure }
          template: |-
=======
      name: { get_param: serverName }
      admin_pass: { get_attr: [ serverPass, value ] }
      flavor: { get_param: serverFlavor }
      image: { get_param: serverImage }
      config_drive: True
      user_data_format: SOFTWARE_CONFIG
      metadata:
        created_by: cn_orch_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'

  acme:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: |
>>>>>>> acme.sh fails when inovted from a bash script
                    #!/usr/bin/env bash
                    # get-dns-challenge-with-acme.sh
                    # clones acme.sh from the repo and sets up the challenge
                    # author: Brian King
                    # copyright: 2019
                    # license: Apache
                    pkgs="git"
                    yum -q -y install $pkgs > /dev/null 2>&1
                    git clone https://github.com/Neilpang/acme.sh.git /root/acme.sh/ > /dev/null 2>&1
                    /bin/bash /root/acme.sh/acme.sh --home /root/.acme.sh --issue --dns -d $domain --yes-I-know-dns-manual-mode-enough-go-ahead-please >> /var/log/cert_issue.log
                    CT=$(grep "TXT value" /var/log/cert_issue.log | awk -F\' '{print $2}')
                    printf %s "${CT}"

  challengeToken:
    type: OS::Heat::SoftwareDeployment
    depends_on: serverInstance
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: getChallenge }
      server: { get_resource: serverInstance }

#begin DNS resources

  challengeResponse:
    type: Rackspace::Cloud::DNS
    depends_on: getChallenge
    properties:
      emailAddress: {get_param: emailAddr}
      name:
        list_join:
          - "."
          - - {str_split: [".", { get_param: domainToSecure }, 1]}
          - - {str_split: [".", { get_param: domainToSecure }, 2]}
      ttl: 300
      records:
        - type: TXT
          data: { get_attr: [challengeToken, deploy_stdout] }
          name:
            list_join:
              - ""
              - - "_acme-challenge."
              - - { get_param: domainToSecure }


  getCert:
    type: OS::Heat::SoftwareConfig
    depends_on: challengeResponse
    properties:
      group: script
      config:
        str_replace:
          template: |
                    #!/usr/bin/env bash
                    # answer-dns-challenge-with-acme.sh
                    # clones acme.sh from the repo and sets up the challenge
                    # author: Brian King
                    # copyright: 2019
                    # license: Apache
                    /bin/bash /root/acme.sh/acme.sh --home /root/.acme.sh --renew --dns --yes-I-know-dns-manual-mode-enough-go-ahead-please -d $domain  >> /var/log/cert_renew.log
                    cert="$(cat /root/.acme.sh/$domain/$domain.cer)"
                    chain="$(cat /root/.acme.sh/$domain/ca.cer)"
                    privkey="$(cat /root/.acme.sh/$domain/$domain.key)"
                    echo "$cert;$chain;$privkey"
          params:
            $domain: { get_param: domainToSecure }

  certData:
    type: OS::Heat::SoftwareDeployment
    depends_on: serverInstance
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: getCert }
      server: { get_resource: serverInstance }



outputs:

  domainDisplay:
    description: "Domain to receive letsencrypt cert"
    value: { get_param: domainToSecure }

  serverPassDisplay:
    description: "Server Admin Password"
    value: { get_attr: [serverPass, value ] }

  serverIPv4Display:
    description: "Server Public IPv4 address"
    value: { get_attr: [serverInstance, accessIPv4 ] }

  challengeTokenDisplay:
    description: "Challenge Token"
    value: { get_attr: [ challengeToken, deploy_stdout ] }

  certCertDisplay:
    description: "SSL certificate for domain"
    value:
      str_split:
        - ";"
        - { get_attr: ["certData", "deploy_stdout"] }
        - 0

  certChainDisplay:
    description: "Intermediate certificate for domain"
    value:
      str_split:
         - ";"
         - { get_attr: ["certData", "deploy_stdout"] }
         - 1

  certKeyDisplay:
    description: "SSL private key for domain"
    value:
      str_split:
        - ";"
        - { get_attr: ["certData", "deploy_stdout"] }
        - 2
