heat_template_version: 2015-10-15

description: |
   ### Using heat to run acme.sh
   ### and get a valid SSL certificate

parameter_groups:

- label: Server Settings
  parameters:
    - serverName
    - serverImage
    - serverFlavor

- label: DNS settings
  parameters:
    - domainToSecure
    - emailAddr

parameters:

#begin server params

  serverName:
    type: string
    label: 'Name of new server'
    default: 'acme-00'

  serverImage:
    type: string
    default: 'CentOS 7 (PVHVM) (Orchestration)'
    label: Server image label
    description: Image with which to build server

  serverFlavor:
    type: string
    default: 1 GB General Purpose v1
    label: Server flavor
    description: Must be a valid Rackspace Cloud Flavor
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      description: must be a valid Rackspace Cloud Server flavor.

# begin DNS params
  domainToSecure:
    type: string
    default: example.rackesc.net
    label: Domain that will receive the letsencrypt cert. DNS must be hosted in Rackspace Cloud.
    description: Domain that will receive the letsencrypt cert. DNS must be hosted in Rackspace Cloud.

  emailAddr:
    type: string
    default: nobody@noone.net
    label: email address for Rackspace DNS record, letsencrypt account, and Cloud Monitoring notifications

resources:

#begin server resources

  serverPass:
      type: OS::Heat::RandomString

  serverInstance:
    type: OS::Nova::Server
    properties:
      name: { get_param: serverName }
      admin_pass: { get_attr: [ serverPass, value ] }
      flavor: { get_param: serverFlavor }
      image: { get_param: serverImage }
      config_drive: True
      user_data_format: SOFTWARE_CONFIG
      metadata:
        created_by: cn_orch_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'

  acme:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: |
                    #!/usr/bin/env bash
                    # get-dns-challenge-with-acme.sh
                    # clones acme.sh from the repo and sets up the challenge
                    # author: Brian King
                    # copyright: 2019
                    # license: Apache
                    # making file manually due to https://github.com/Neilpang/acme.sh/issues/2223
                    mkdir -p /root/.acme.sh
                    touch /root/.acme.sh/account.conf
                    pkgs="git"
                    yum -q -y install $pkgs > /dev/null 2>&1
                    git clone https://github.com/Neilpang/acme.sh.git /root/acme.sh/ > /dev/null 2>&1
                    cd /root/acme.sh
                    ./acme.sh --debug --issue --dns -d $domain  --accountemail $email --yes-I-know-dns-manual-mode-enough-go-ahead-please 2>&1 | tee /tmp/results
                    grep "TXT value" /tmp/results | awk -F\' '{print $2}'
          params:
            $domain: { get_param: domainToSecure }
            $email:  { get_param: emailAddr }

  challengeToken:
    type: OS::Heat::SoftwareDeployment
    depends_on: serverInstance
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: acme }
      server: { get_resource: serverInstance }

#begin DNS resources

  challengeResponse:
    type: Rackspace::Cloud::DNS
    properties:
      emailAddress: {get_param: emailAddr}
      name: rackesc.net
      ttl: 300
      records:
        - type: TXT
          data: { get_attr: [challengeToken, deploy_stdout]}
          name:
            list_join:
              - ''
              - - '_acme-challenge.'
              - - { get_param: domainToSecure }

outputs:
  serverPassDisplay:
    value: { get_attr: [serverPass, value ] }
    description: 'Admin Password of Instance'

  serverIPv4Display:
    value: { get_attr: [serverInstance, accessIPv4 ] }
    description: 'IPv4 of server'

  challengeTokenDisplay:
    value: { get_attr: [ challengeToken, deploy_stdout ] }
    description: Challenge Token
