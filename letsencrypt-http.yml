heat_template_version: 2015-10-15

description: |
   ### Using heat to run certbot and get a valid SSL certificate
   ### this is a demo of OS::Heat::SoftwareConfig
   ### and OS::Heat::SoftwareDeployment resources

parameter_groups:

- label: Server Settings
  parameters:
    - serverName
    - serverImage
    - serverFlavor

- label: DNS settings
  parameters:
    - domainToSecure
    - emailAddr

parameters:

#begin server params

  serverName:
    type: string
    label: 'Name of new server'
    default: 'certbot-00'

  serverImage:
    type: string
    default: 'CentOS 7 (PVHVM) (Orchestration)'
    label: Server image label
    description: Image with which to build server

  serverFlavor:
    type: string
    default: 1 GB General Purpose v1
    label: Server flavor
    description: Must be a valid Rackspace Cloud Flavor
    constraints:
    - allowed_values:
      - 1 GB General Purpose v1
      - 2 GB General Purpose v1
      - 4 GB General Purpose v1
      - 8 GB General Purpose v1
      - 15 GB I/O v1
      - 30 GB I/O v1
      description: must be a valid Rackspace Cloud Server flavor.

# begin DNS params
  domainToSecure:
    type: string
    default: heat00.rackesc.net
    label: Domain that will receive the letsencrypt cert. DNS must be hosted in Rackspace Cloud.
    description: Domain that will receive the letsencrypt cert. DNS must be hosted in Rackspace Cloud.

  emailAddr:
    type: string
    default: nobody@noone.net
    label: email address for Rackspace DNS and letsencrypt

resources:

#begin server resources

  serverPass:
      type: OS::Heat::RandomString

  serverInstance:
    type: OS::Nova::Server
    properties:
      name: { get_param: serverName }
      admin_pass: { get_attr: [ serverPass, value ] }
      flavor: { get_param: serverFlavor }
      image: { get_param: serverImage }
      config_drive: True
      user_data_format: SOFTWARE_CONFIG
      metadata:
        created_by: cn_orch_template
      networks:
        - network: '00000000-0000-0000-0000-000000000000'
        - network: '11111111-1111-1111-1111-111111111111'

  certBot:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          template: |
                    #!/usr/bin/env bash
                    # certbot.sh; installs certbot on Cent7 and gets a certificate
                    # version: 0.0.1.a
                    # author: Brian King
                    # license: Apache

                    # install needed packages
                    pkgs="iptables-services iptables-utils httpd mod_ssl certbot python2-certbot-apache"
                    yum -q -y install $pkgs > /dev/null 2>&1
                    systemctl stop firewalld; systemctl mask firewalld; systemctl enable iptables
                    iptables -I INPUT 1 -m multiport -p tcp --dports http,https -j ACCEPT
                    iptables-save > /etc/sysconfig/iptables
                    systemctl start httpd; systemctl enable httpd
                    mkdir -p /var/www/$domain
                    mkdir -p /etc/httpd/conf.d/
                    cat > /etc/httpd/conf.d/$domain.conf << EOF
                    <VirtualHost *:80>
                    ServerName $domain
                    <Directory /var/www/$domain>
                    Require all granted
                    </Directory>
                    DocumentRoot /var/www/$domain
                    </VirtualHost>
                    EOF
                    /usr/bin/certbot certonly -qn --apache -w /var/www/$domain -d $domain -m $email --no-eff-email --agree-tos
                    new_cert=$(cat /etc/letsencrypt/live/$domain/cert.pem)
                    new_chain=$(cat /etc/letsencrypt/live/$domain/fullchain.pem)
                    new_key=$(cat /etc/letsencrypt/live/$domain/privkey.pem)
                    echo "$new_cert;$new_chain;$new_key"
          params:
            $domain: { get_param: domainToSecure }
            $email:  { get_param: emailAddr }

  certBotResults:
    type: OS::Heat::SoftwareDeployment
    depends_on: serverInstance
    properties:
      signal_transport: TEMP_URL_SIGNAL
      config: { get_resource: certBot }
      server: { get_resource: serverInstance }

#begin DNS resources
  dnsRecord:
    type: Rackspace::Cloud::DNS
    properties:
      emailAddress: {get_param: emailAddr}
      name: rackesc.net
      ttl: 300
      records:
        - type: A
          data: { get_attr: [serverInstance, accessIPv4 ]}
          name: { get_param: domainToSecure }

outputs:
  serverPassDisplay:
    value: { get_attr: [serverPass, value ] }
    description: 'Admin Password of Instance'

  serverIPv4Display:
    value: { get_attr: [serverInstance, accessIPv4 ] }
    description: 'IPv4 of server'

  certBotCert:
    description: 'SSL certificate for domain'
    value:
      str_split:
        - ';'
        - { get_attr: ['certBotResults', 'deploy_stdout'] }
        - 0

  certBotChain:
    description: SSL chain (intermediate) certificates for domain
    value:
      str_split:
        - ';'
        - { get_attr: ['certBotResults', 'deploy_stdout'] }
        - 1

  certBotKey:
    description: SSL private key for domain
    value:
      str_split:
        - ';'
        - { get_attr: ['certBotResults', 'deploy_stdout'] }
        - 2
